package com.kartik.org;

public class LinkListRotate {

	static Node head;
	static class Node		{
		int data;
		Node next;
		Node (int d)
		{
			data = d;
			next = null;
		}
	}
	
	
	static void rotateleft(Node head,Node loop, int val) {	
		if (loop == null)return;
		rotateleft(head, loop.next, val - 1);
		if (loop.next == null&&val>0) 
			loop.next = head;
		if (val == 0)
			head = loop;
		else if (val == 1) 
			loop.next=null;
		}
	
		static void leftRotate(Node head, int val) {
		rotateleft(head,head,val);
		}
	
	//function to print ll//
	public void printlist(){
		Node n = head;
		int count = 0;
		while(n!= null)
		{
			System.out.print(n.data + " > " );
			n = n.next;
			count++;
		}
		System.out.println("\nNo. of Nodes = " + count);
	}
	public void push(int i){
		Node new_node = new Node(i);
		new_node.next = head;
		head = new_node;
	}
	
	
	    private static Node tail = null;
	    private static int size = 0;

	    public static int getSize() {
	        return size;
	    }

	    public static void insert(int n) {
	        Node node = new Node(n);
	        node.next = tail;
	        if (tail == null) {
	            tail = node;
	        } else {
	            head.next = node;
	        }
	        head = node;
	        size++;
	    }

	
	public Node rotate(int k){
		if(head == null)	return head;
		int count = 1;
		Node curr = head, n= head ,last= null;
		while(n.next!= null){
			last = n.next;
			n=n.next;
		}
		
		while(count<=k){
			last.next = head;
			head = head.next;
			last = curr;
			curr.next = null;
			curr = head ;
			count++;
		}
		
		return head;
	}
	
	public static void traverseNodes(Node firstNode) {
        Node curnode = firstNode;
        do {
            System.out.println("Traversing node: " + curnode.data);
            curnode = curnode.next;
        } while (curnode != firstNode);
    }
	public static void main (String[] args) {
		for ( int i = 60 ; i >= 10 ; i=i-10)
			insert(i);

		System.out.println("Generated Linked List: ");
		//ll.printlist();
		//traverseNodes(head);
		System.out.println("Linked list after rotation: ");
		//ll.rotate(4);
		
		leftRotate(head, 4);
		//ll.printlist();
		traverseNodes(head);
	}
}
